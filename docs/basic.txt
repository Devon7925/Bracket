'`  variable
@   assign
{}  value/array
,   in betweeen elements of array
;   end of line
[]  index acess
~   return
()  group
_   flatten
.   sub
abc operation
:   this
/   comment


Assign a variable to a value:
'Variable`@{Value};

Create a method:
'Method`@{'Variable`@{Value}};

Execute a method:
'Method`;

MultiLine Method:
'Method`@{
    {'Variable`@{Value}},
    {'Variable 2`@{Value 2}}
};

Array:
'Variable`@{{Value1},{Value2}};

Element acess:
'index 0`@'Variable`[0];
note: accessing out of bounds elements will always return a false bit

Varibular acess:
'index 0`@'Variable`[{0}];

Define operator:
'&`@{
    {'res`@{1}},
    {{'res`@{0}}if'not`['a`]},
    {{'res`@{0}}if'not`['b`]},
    {~'res`}
};
note: ~/return is used here, it can only be used for operations
note 2: this is the only context local variables exist in as a and b input
note 3: operations evaluate right to left

Flatten array:
{{{something}, {something else}}}_ becomes {{something},{something else}}
note: implementation of this may change

Sub element:
'a`.{something}@{something else};
. acts as an operator and the sub value is the interpretation of the right hand side so
you can do things like 'a`.{5}+{6} to access 'a`.{11}
sub elements can also be used for aditional local variables

This syntax:
: represents this which is the method currently executing
'ex`@{:.{a}@{1234}}
'ex`;
'ex`.{a} is now 1234

Commenting:
When commenting syntax characters (Ex. {,},(,),',`,[,]) use slashes on both sides
/'this`.{doesn't}@[cause];(errors)/

See test.bcrt under src/app for examples